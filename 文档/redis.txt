linux的安装
$ wget http://download.redis.io/releases/redis-2.8.17.tar.gz
$ tar xzf redis-2.8.17.tar.gz
$ cd redis-2.8.17
$ make
make完后 redis-2.8.17目录下会出现编译后的redis服务程序redis-server,还有用于测试的客户端程序redis-cli,两个程序位于安装目录 src 目录下：

下面启动redis服务.

$ cd src
$ ./redis-server
注意这种方式启动redis 使用的是默认配置。也可以通过启动参数告诉redis使用指定配置文件使用下面命令启动。

$ cd src
$ ./redis-server ../redis.conf
redis.conf 是一个默认的配置文件。我们可以根据需要使用自己的配置文件。

启动redis服务进程后，就可以使用测试客户端程序redis-cli和redis服务交互了。 比如：

$ cd src
$ ./redis-cli
redis> set foo bar
OK
redis> get foo
"bar"




redis每个数据库对外都是一个从0开始的递增数字命名，Redis默认支持16个数据库（可以通过配置文件支持更多，无上限）,可以通过配置databases来修改这一数字。

客户端与Redis建立连接后会自动选择0号数据库，不过可以随时使用SELECT命令更换数据库

然而这些以数字命名的数据库又与我们理解的数据库有所区别。首先Redis不支持自定义数据库的名字，每个数据库都以编号命名，

开发者必须自己记录哪些数据库存储了哪些数据。另外Redis也不支持为每个数据库设置不同的访问密码，所以一个客户端要么可以访问全部数据库，

要么连一个数据库也没有权限访问。最重要的一点是多个数据库之间并不是完全隔离的，比如FLUSHALL命令可以清空一个Redis实例中所有数据库中的数据。

综上所述，这些数据库更像是一种命名空间，而不适宜存储不同应用程序的数据。比如可以使用0号数据库存储某个应用生产环境中的数据，

使用1号数据库存储测试环境中的数据，但不适宜使用0号数据库存储A应用的数据而使用1号数据库B应用的数据，不同的应用应该使用不同的Redis实例存储数据。

由于Redis非常轻量级，一个空Redis实例占用的内在只有1M左右，所以不用担心多个Redis实例会额外占用很多内存。



#查看所有配置
CONFIG GET *

#修改配置文件中的设置
CONFIG SET CONFIG_SETTING_NAME NEW_CONFIG_VALUE

#查看key是否存在
EXISTS key

#切换数据库
SELECT NUM
    例：SELECT 1   #切换到数据库1

#查找所有符合给定模式( pattern)的 key
KEYS pattern
    例：KEYS *set*   查找名字带有set的键

#将当前数据库的 key 移动到给定的数据库 db 当中
MOVE key db
    例：move setp 1  将键setp移动到数据库1中

#仅当 newkey 不存在时，将 key 改名为 newkey 。
RENAMENX key newkey

返回 key 所储存的值的类型。
type key

一、String
    概述：String是redis最基本的类型，最大能储存512MB的数据，String类型是二进制安全的，即可以储存任何数据，比如数字、图片、序列化对象等
    1、设置
        a、设置键值（添加）
            语法：set key value
            示例：set a "b" (a键b值)
        b、设置键值及过期 时间，以秒为单位
            语法：setex key seconds value
        c、设置多个键值对
            语法：mset key1 value1 ..... keyn valuen
    2、获取
        a、根据键获取值，如果键不存在返回None
            语法：get key
        b、获取多个键值
            语法：mget key1....keyn
    3、运算
        要求：值需要是字符串类型的数字
        a、将key对应的值加1
            语法：incr key
        b、将key对应的值减1
            语法：decr key
        c、将key对应的值加整数
            语法：incrby key intnum
        d、将key对应的值减整数
            语法：decrby key intnum
    4、其他
        a、追加值
            语法：append key value
        b、获取长度
            语法：strlen key
        c、将给定 key 的值设为 value ，并返回 key 的旧值(old value)。
            语法：GETSET key value
二、Key
    1、查找键，参数支持正则
        语法：keys pattern
    2、判断键是否存在  存在1 不存在0
        语法：exists key
    3、查看键对应的value类型
        语法：type key
    4、删除键及对应的值
        语法：del key1...
    5、设置过期时间
        语法：expire key seconds
    6、查看有效时间，以秒为单位
        语法：ttl key
三、Hash
    概述：hash用于存储对象
        {
            name:"lsy"
            age:18
        }
    1、设置
        a、设置单个值
            语法：hset key field value
        b、设置多个值
            语法：hmset key field value[field value ......]
            示例：hmset p1 name lilei age 20
    2、获取
        a、获取一个属性的值
            语法：hget key field
        b、获取多个属性的值
            语法：hmget key field....
        c、获取所有属性和值
            语法：hgetall key
        d、获取所有属性
            语法：hkeys key
        e、获取所有值
            语法：hvals key
        f、返回包含数据的个数
            语法：hlen key
    3、其他
        a、判断属性是否存在 存在1 否则0
            语法：hexists key field
        b、删除属性及值
            语法：hdel key field....
        c、返回字符串的长度
            语法：hstrlen key field
四、List
    概述：列表的元素类型为string  按照插入的顺序排序 在列表的头部或尾部添加元素
    1、设置
        a、在头部插入
            语法：lpush key value [value...]
        b、在尾部插入
            语法：rpush key value [value...]
        c、在一个元素的前|后插入数据
            语法：linsert key before|after pivot value
                例： linsert listp before two teen  在two的前面添加元素teen
        d、设置指定索引的元素值
            语法：lset key index value  只能在已有的索引上指定 指定之后原来的值就会被新值替换
    2、获取
        a、移除并返回key对应list的第一个元素
            语法：lpop key
        b、移除并返回key对应list的最后一个元素
            语法：rpop key
        c、返回存储在key的列表中的指定范围的元素(条件下标)
            语法：lrange key start end
    3、其他
        a、裁剪列表 改为原列表的子集(原列表改变)
            语法：ltrim key start end
        b、返回列表的长度
            语法:llen key
        c、返回列表中索引对应的值
            语法：lindex key index
五、Set
    概述：无序 元素string类型 元素唯一
    1、设置
        a、添加元素
            语法：sadd key member [member...]
    2、获取
        a、返回key集合中的所有元素
            语法：smembers key
        b、返回集合元素个数
            语法：scard key
    3、其他
        a、求多个集合的交集
            语法：sinter key [key...]
        b、差集
            语法：sdiff key [key...]
        c、并集
            语法：sunion key [key...]
        d、判断某个元素是否在集合中 存在返回1 不存在返回0
            语法：sismember key member
六、Zset
    概述：有序 元素string类型 元素唯一  每个元素都会关联一个double类型的score(表示权重) 通过权重的大小排序 元素的score可以相同
    1、设置
        a、添加元素
           语法:zadd key score member [score member ...]
    2、获取
        a、返回指定范围内的数据
            语法：zrange key start end
        b、返回元素个数
            语法：zcard key
        c、返回有序集合中，score在min和max之间的元素个数
            语法：zcount key min max
        d、返回元素的score值
            语法：zscore key member
        e、迭代有序集合中的元素（包括元素成员和元素分值）
            语法：zscan key cursor [MATCH pattern] [COUNT count]
                例：zscan zsetp 0 match "*"  返回所有元素及对应数值  也可"T*" 返回所有T开头的元素  暂时不太懂这个0的作用这个是游标位 填其他数也没啥影响
        f、通过分数返回有序集合指定区间内的成员
            语法：zrangebyscore key min max [WITHSCORES] [LIMIT]
                例：zrangebyscore zsetp 0 2  返回0到2数值的元素


七、HyperLogLog
    概述：Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定
的、并且是很小的。在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基 数。这和计算基数时，
元素越多耗费内存就越多的集合形成鲜明对比。但是，因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，
所以 HyperLogLog 不能像集合那样，返回输入的各个元素。
    比如数据集 {1, 3, 5, 7, 5, 7, 8}， 那么这个数据集的基数集为 {1, 3, 5 ,7, 8}, 基数(不重复元素)为5。基数估计就是在误差可接受的范围内，快速计算基数。

    1、设置
        a、添加元素
            语法：pfadd key element [element ...]
        b、返回给定 HyperLogLog 的基数估算值。
            语法：pfcount key [key...]
        c、将多个 HyperLogLog 合并为一个 HyperLogLog
            语法：pfmegre destkey sourcekey [sourcekey ...]


八、发布订阅
    概述：Redis 发布订阅(pub/sub)是一种消息通信模式：发送者(pub)发送消息，订阅者(sub)接收消息。Redis 客户端可以订阅任意数量的频道。
        1、设置
            a、创建订阅频道 (我们是可以用多个客户端订阅这个频道 这样我们就可以有多个客户端接收发布的消息)
                语法：subscribe 频道名 [频道名...]
            b、发布消息(需要开一个新的redis客户端)
                语法：publish 频道名 消息(消息要加双引号)

九、redis 事务
    概述：Redis 事务可以一次执行多个命令， 并且带有以下三个重要的保证：
        ·批量操作在发送 EXEC 命令前被放入队列缓存。
        ·收到 EXEC 命令后进入事务执行，事务中任意命令执行失败，其余的命令依然被执行。
        ·在事务执行过程，其他客户端提交的命令请求不会插入到事务执行命令序列中。
    一个事务从开始到执行会经历以下三个阶段：
        ·开始事务。
        ·命令入队。
        ·执行事务。

        ·这是一个完整的事务过程 multi开始事务块 命令入队列 exec执行命令
        multi
        set name strkey
    结果：  QUEUED ---------------> 证明加入QUEUED
        lpush listp listvalue
    结果：  QUEUED
        sadd setp setvalue
    结果：  QUEUED
        smembers setp
    结果：  QUEUED
        exec

        单个 Redis 命令的执行是原子性的，但 Redis 没有在事务上增加任何维持原子性的机制，所以 Redis 事务的执行并不是原子性的。
        事务可以理解为一个打包的批量执行脚本，但批量指令并非原子化的操作，中间某条指令的失败不会导致前面已做指令的回滚，
        也不会造成后续的指令不做。


        1、设置
            a、取消事务，放弃事务块内的所有命令
                语法：discard
            b、执行所有事务块内的命令
                语法：exec
            c、标记一个事务块的开始
                语法：multi
            d、取消watch命令对key的监视
                语法：unwatch
            e、监视一个(或多个) key ，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断。
                语法：watch key [key...]

十、redis 脚本
    概述：Redis 脚本使用 Lua 解释器来执行脚本。 Redis 2.6 版本通过内嵌支持 Lua 环境。执行脚本的常用命令为 EVAL。
        1、设置
            a、执行lua脚本
                语法：eval script numkeys key [key ...] arg [arg ...]    script:脚本 numkeys:key的个数
                    例：eval "return {KEYS[1],KEYS[2],ARGV[1],ARGV[2]}" 2 username age jack 20
                                      key占位符 key占位符 value占位符 value占位符
            b、查看指定的脚本是否已经被保存在缓存当中。
                语法：script exists script [script ...]
            c、从脚本缓存中移除所有脚本
                语法：script flush
            d、杀死当前正在运行的 Lua 脚本。
                语法：script kill
            e、将脚本 script 添加到脚本缓存中，但并不立即执行这个脚本。
                语法：scriptload script

十一、redis 连接
    概述：Redis 连接命令主要是用于连接 redis 服务。
        1、设置
            a、验证密码是否正确
                语法：auth password
            b、打印字符串
                语法：echo message
            c、查看服务是否运行
                语法：ping
            d、关闭当前连接
                语法：quit
            f、切换数据库
                语法：select index
十二、redis 服务器
    概述：Redis 服务器命令主要是用于管理 redis 服务。
        1、设置（写几个常见的吧）
            a、异步执行一个 AOF（AppendOnly File） 文件重写操作
                语法：bgrewriteaof
            b、在后台异步保存当前数据库的数据保存到磁盘
                语法：bgsave
            c、关闭客户端连接
                语法：client kill [ip:port][ID client-id]
            d、获取客户端的连接列表
                语法：client list
            e、设置当前连接的名称
                语法：client setname connection-name
            f、获取连接的名称
                语法：client getname
            g、获取 Redis 命令详情数组
                语法：command
            h、获取给定命令的所有键
                语法：command getkeys
                    例：COMMAND GETKEYS MSET a b c d e f
            i、获取时间
                语法：time
            j、获取指定配置参数的值
                语法：config get parameter
            k、对启动 Redis 服务器时所指定的 redis.conf 配置文件进行改写
                语法：config rewrite
            l、修改 redis 配置参数，无需重启
                语法：config set parameter value
            m、返回当前数据库key的数量
                语法：dbsize
            n、删除所有数据库的key
                语法：flushall
            o、删除当前数据库的所有key
                语法：fiushdb
            p、获取 Redis 服务器的各种信息和统计数值
                语法：info[section]
            q、实时打印出 Redis 服务器接收到的命令，调试用
                语法：monitor
            r、返回主从实例所属的角色
                语法：role
            s、同步保存数据到硬盘
                语法：save
            t、异步保存数据到硬盘，并关闭服务器
                语法：shutdown [nosave][save]
            u、将当前服务器转变为指定服务器的从属服务器(slave server)
                语法：slaveof host port
            v、管理redis的慢日志
                语法：slowlog subcommand [argument]
            w、用于复制功能(replication)的内部命令
                语法：sync

十三、redis 数据的备份与恢复
    概述：数据库的备份与恢复
        1、设置
            a、创建数据库备份
                语法：save     #该命令会在redis的安装目录创建dump.rdb文件
            b、数据恢复
                如果需要恢复数据，只需将备份文件(dump.rdb)移动到redis安装目录并启动服务即可。获取redis目录可以使用 CONFIG 命令，如下所示：
                语法：config get dir (这个只是获取安装路径)
            c、创建 redis 备份文件也可以使用命令 bgsave，该命令在后台执行。
                语法：bgsave

十四、redis 安全
    概述：我们可以通过 redis 的配置文件设置密码参数，这样客户端连接到 redis 服务就需要密码验证，这样可以让你的 redis 服务更安全。
        1、设置
            a、config get requirepass
                默认情况下 requirepass 参数是空的，这就意味着你无需通过密码验证就可以连接到 redis 服务。你可以通过以下命令来修改该参数：
                    例：config get requirepass "password"
                        设置密码后，客户端连接 redis 服务就需要密码验证，否则无法执行命令。

十五、redis 性能测试
十六、redis 客户端连接
    概述：Redis 通过监听一个 TCP 端口或者 Unix socket 的方式来接收来自客户端的连接，当一个连接建立后，Redis 内部会进行以下一些操作：
        ·首先，客户端 socket 会被设置为非阻塞模式，因为 Redis 在网络事件处理上采用的是非阻塞多路复用模型。
        ·然后为这个 socket 设置 TCP_NODELAY 属性，禁用 Nagle 算法
        ·然后创建一个可读的文件事件用于监听这个客户端 socket 的数据发送

        1、设置最大连接数 启动时：
            redis-server --maxclients 100000

十七：redis 管道技术
    概述：Redis是一种基于客户端-服务端模型以及请求/响应协议的TCP服务。这意味着通常情况下一个请求会遵循以下步骤：
        ·客户端向服务端发送一个查询请求，并监听Socket返回，通常是以阻塞模式，等待服务端响应。
        ·服务端处理命令，并将结果返回给客户端。

        redis 管道技术
            Redis 管道技术可以在服务端未响应时，客户端可以继续向服务端发送请求，并最终一次性读取所有服务端的响应。
        实例
            查看 redis 管道，只需要启动 redis 实例并输入以下命令：
        $(echo -en "PING\r\n SET runoobkey redis\r\nGET runoobkey\r\nINCR visitor\r\nINCR visitor\r\nINCR visitor\r\n"; sleep 10) | nc localhost 6379

        +PONG
        +OK
        redis
        :1
        :2
        :3

        以上实例中我们通过使用 PING 命令查看redis服务是否可用，之后我们设置了 runoobkey 的值为 redis，然后我们获取 runoobkey 的值并使得
        visitor 自增 3 次。在返回的结果中我们可以看到这些命令一次性向 redis 服务提交，并最终一次性读取所有服务端的响应

        管道技术的优势
           ·管道技术最显著的优势是提高了 redis 服务的性能。

十八、Redis 分区
    概述：分区是分割数据到多个Redis实例的处理过程，因此每个实例只保存key的一个子集。
        1、分区的优势
           ·通过利用多台计算机内存的和值，允许我们构造更大的数据库。
           ·通过多核和多台计算机，允许我们扩展计算能力；通过多台计算机和网络适配器，允许我们扩展网络带宽。

        2、分区的不足 redis的一些特性在分区方面表现的不是很好：
            ·涉及多个key的操作通常是不被支持的。举例来说，当两个set映射到不同的redis实例上时，你就不能对这两个set执行交集操作。
            ·涉及多个key的redis事务不能使用。
            ·当使用分区时，数据处理较为复杂，比如你需要处理多个rdb/aof文件，并且从多个实例和主机备份持久化文件。
            ·增加或删除容量也比较复杂。redis集群大多数支持在运行时增加、删除节点的透明数据平衡的能力，但是类似于客户端分区、代理等其他系统
              则不支持这项特性。然而，一种叫做presharding的技术对此是有帮助的。
    分区类型
        ·Redis 有两种类型分区。 假设有4个Redis实例 R0，R1，R2，R3，和类似user:1，user:2这样的表示用户的多个key，对既定的key有多种不同方式
          来选择这个key存放在哪个实例中。也就是说，有不同的系统来映射某个key到某个Redis服务。

    范围分区
        最简单的分区方式是按范围分区，就是映射一定范围的对象到特定的Redis实例。
        比如，ID从0到10000的用户会保存到实例R0，ID从10001到 20000的用户会保存到R1，以此类推。

        这种方式是可行的，并且在实际中使用，不足就是要有一个区间范围到实例的映射表。这个表要被管理，同时还需要各 种对象的映射表，
        通常对Redis来说并非是好的方法。

    哈希分区
        另外一种分区方法是hash分区。这对任何key都适用，也无需是object_name:这种形式，像下面描述的一样简单：
            ·用一个hash函数将key转换为一个数字，比如使用crc32 hash函数。对key foobar执行crc32(foobar)会输出类似93024922的整数。
            ·对这个整数取模，将其转化为0-3之间的数字，就可以将这个整数映射到4个Redis实例中的一个了。93024922 % 4 = 2，就是说key foobar应该
              被存到R2实例中。注意：取模操作是取除的余数，通常在多种编程语言中用%操作符实现。