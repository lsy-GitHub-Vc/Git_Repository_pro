
模式：MVC
    优势：
        a、低耦合
        b、复用性高
        c、开发快捷
        d、部署方便
        e、 维护成本低
        f、...

    特点：
        a、强大的数据库功能
        b、自带强大的后台功能

MVC与MVT模式：
    MVC：是一种插件式的、松耦合的方式连接在一起的。

        Model：编写程序的应有功能，负责业务对象与数据库的映射(ORM)
        View：图形界面，负责和用户的交互(页面)和功能展示
        Controller：负责转发请求，对请求进行处理

        流程：E:\PyCharm\project\Django\map\mvc流程.png

    MVT：Django 的 MTV 模式本质上和 MVC 是一样的，也是为了各组件间保持松耦合关系，只是定义上有些许不同

        M 表示模型（Model）：编写程序应有的功能，负责业务对象与数据库的映射(ORM)。
        T 表示模板 (Template)：负责如何把页面(html)展示给用户。
        V 表示视图（View）：负责业务逻辑，并在适当时候调用 Model和 Template。

        除了以上三层之外，还需要一个 URL 分发器，它的作用是将一个个 URL 的页面请求分发给不同的 View 处理，
        View 再调用相应的 Model 和 Template

        流程：E:\PyCharm\project\Django\map\mvt流程.png


解析：

    用户通过浏览器向我们的服务器发起一个请求(request)，这个请求会去访问视图函数：

        a.如果不涉及到数据调用，那么这个时候视图函数直接返回一个模板也就是一个网页给用户。
        b.如果涉及到数据调用，那么视图函数调用模型，模型去数据库查找数据，然后逐级返回。
        视图函数把返回的数据填充到模板中空格中，最后返回网页给用户。




Django目录说明：
    目录说明：
        a、manage.py: 一个实用的命令行工具，可让你以各种方式与该 Django 项目进行交互。
        b、__init__.py: 一个空文件，告诉 Python 该目录是一个 Python 包。
        c、asgi.py: 一个 ASGI 兼容的 Web 服务器的入口，以便运行你的项目。
        d、settings.py: 该 Django 项目的设置/配置。
        e、urls.py: 该 Django 项目的 URL 声明; 一份由 Django 驱动的网站"目录"。
        f、wsgi.py: 一个 WSGI 兼容的 Web 服务器的入口，以便运行你的项目。